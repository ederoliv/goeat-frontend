// libraries/scripts/fetchInterceptor.js
// Sistema que MONITORA todas as requisi√ß√µes HTTP automaticamente
// N√ÉO PRECISA MEXER EM NENHUMA REQUISI√á√ÉO EXISTENTE!

(function() {
    'use strict';
    
    // Guarda o fetch original do navegador
    const originalFetch = window.fetch;
    
    // Substitui o fetch global do navegador
    window.fetch = async function(...args) {
        try {
            // Chama o fetch original normalmente
            const response = await originalFetch.apply(this, args);
            
            // MONITORA a resposta - se for 401, trata automaticamente
            if (response.status === 401) {
                console.warn('üîí Erro 401 detectado automaticamente!');
                handleUnauthorized(args[0]); // Passa a URL da requisi√ß√£o
            }
            
            // Retorna a resposta normalmente (n√£o interfere no c√≥digo existente)
            return response;
            
        } catch (error) {
            // Se der erro na requisi√ß√£o, apenas repassa o erro
            console.error('Erro na requisi√ß√£o:', error);
            throw error;
        }
    };
    
    // Fun√ß√£o que trata o erro 401
    function handleUnauthorized(requestUrl) {
        console.log('Tratando erro 401 para:', requestUrl);
        
        // 1. Limpa todos os dados de sess√£o
        clearAllSessionData();
        
        // 2. Determina para onde redirecionar baseado na URL atual
        const redirectUrl = getRedirectUrl();
        
        // 3. Mostra notifica√ß√£o (se SweetAlert2 estiver dispon√≠vel)
        showSessionExpiredMessage(redirectUrl);
    }
    
    // Limpa TODOS os dados de sess√£o/localStorage
    function clearAllSessionData() {
        // Remove dados do cliente
        localStorage.removeItem('clientData');
        sessionStorage.removeItem('clientData');
        
        // Remove dados do parceiro  
        localStorage.removeItem('userData');
        sessionStorage.removeItem('userData');
        
        // Remove carrinho
        sessionStorage.removeItem('cart');
        
        // Remove qualquer outro dado que voc√™ usar
        localStorage.removeItem('authToken');
        localStorage.removeItem('currentUser');
        
        console.log('‚úÖ Dados de sess√£o limpos');
    }
    
    // Determina para onde redirecionar baseado na URL atual
    function getRedirectUrl() {
        const currentPath = window.location.pathname;
        
        // Se est√° em √°rea de parceiro
        if (currentPath.includes('/partner/') || currentPath.includes('/loginPartner/')) {
            return getBaseUrl() + '/pages/loginPartner/index.html';
        }
        
        // Se est√° em √°rea de cliente  
        if (currentPath.includes('/client/') || currentPath.includes('/loginClient/')) {
            return getBaseUrl() + '/pages/loginClient/index.html';
        }
        
        // Fallback - p√°gina principal
        return getBaseUrl() + '/index.html';
    }
    
    // Obt√©m a URL base do projeto
    function getBaseUrl() {
        return window.location.origin;
    }
    
    // Mostra mensagem de sess√£o expirada
    function showSessionExpiredMessage(redirectUrl) {
        // Verifica se SweetAlert2 est√° dispon√≠vel
        if (typeof Swal !== 'undefined') {
            Swal.fire({
                icon: 'warning',
                title: 'Sess√£o Expirada',
                text: 'Sua sess√£o expirou. Voc√™ ser√° redirecionado para fazer login novamente.',
                confirmButtonText: 'OK',
                confirmButtonColor: '#06CF90',
                allowOutsideClick: false,
                allowEscapeKey: false
            }).then(() => {
                window.location.href = redirectUrl;
            });
        } else {
            // Fallback para alert nativo
            alert('Sua sess√£o expirou. Voc√™ ser√° redirecionado para fazer login novamente.');
            window.location.href = redirectUrl;
        }
    }
    
    console.log('üõ°Ô∏è Interceptor de requisi√ß√µes ativo - monitorando 401s automaticamente');
    
})();